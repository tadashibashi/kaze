def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    if (buildAsApplication) {
        namespace "com.kaze.app"
    }
    compileSdkVersion ${KAZE_ANDROID_SDK_VERSION}
    defaultConfig {
        applicationId "${KAZE_ANDROID_APP_ID}"
        minSdkVersion ${KAZE_ANDROID_SDK_MIN_VERSION}
        targetSdkVersion ${KAZE_ANDROID_SDK_VERSION}
        versionCode ${KAZE_ANDROID_VERSION_CODE}
        versionName "${KAZE_ANDROID_VERSION_NAME}"
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_APP_PLATFORM=android-${KAZE_ANDROID_SDK_MIN_VERSION}", "-DANDROID_STL=c++_shared"
                //abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                abiFilters 'arm64-v8a'
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
        }
    }

    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            cmake {
                path 'jni/CMakeLists.txt'
            }
        }
    }

    lint {
        abortOnError false
    }

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "${KAZE_ANDROID_APP_ID}.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
